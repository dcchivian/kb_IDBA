# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class kb_IDBA(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def run_IDBA(self, params, context=None):
        """
        Run IDBA on paired end libraries
        :param params: instance of type "IDBA_Params" (Input parameters for
           running IDBA. string workspace_name - the name of the workspace
           from which to take input and store output. string
           output_contigset_name - the name of the output contigset
           list<paired_end_lib> read_libraries - Illumina PairedEndLibrary
           files to assemble. string dna_source - the source of the DNA used
           for sequencing 'single_cell': DNA amplified from a single cell via
           MDA anything else: Standard DNA sample from multiple cells) ->
           structure: parameter "workspace_name" of String, parameter
           "output_contigset_name" of String, parameter "read_libraries" of
           list of type "paired_end_lib" (The workspace object name of a
           PairedEndLibrary file, whether of the KBaseAssembly or KBaseFile
           type.), parameter "dna_source" of String, parameter
           "min_contig_len" of Long
        :returns: instance of type "IDBA_Output" (Output parameters for IDBA
           run. string report_name - the name of the KBaseReport.Report
           workspace object. string report_ref - the workspace reference of
           the report.) -> structure: parameter "report_name" of String,
           parameter "report_ref" of String
        """
        return self._client.call_method(
            'kb_IDBA.run_IDBA',
            [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('kb_IDBA.status',
                                        [], self._service_ver, context)
